<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly name="System.Net.Http" #>
<#@ assembly name="System.Runtime.Serialization" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Web.Abstractions" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Net.Http" #>
<#@ import namespace="System.Runtime.Serialization.Json" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#
	var helper = new Helper(this, this.Host, this.GenerationEnvironment);
	var gen = new Generator(this, this.Host, this.GenerationEnvironment);
	//gen.Url = "http://noticeapi.nexon.com/notice/lastnoticelist";
	gen.Url = "http://jsonplaceholder.typicode.com/posts";
	gen.HttpMethod = HttpMethod.Get;
	gen.Encoding = Encoding.UTF8;
	
	//gen.LoadJson("..\\..\\lastnoticelist.json");
	var obj = gen.Execute();

#>
//---------------------------------------------------------------------------------------------------------------
// <auto-generated>
//     테이블 변환 도구.
//     이 코드는 도구를 사용하여 생성되었습니다.
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면 이러한 변경 내용이 손실됩니다. 
// </auto-generated>
//---------------------------------------------------------------------------------------------------------------
namespace <#=helper.GetNamespace(this.Host.TemplateFile)#>
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;

<#  if (obj.IsDictionary) 
	{
		foreach(var key in obj.ObjectDictionary.Keys) 
		{
			var value = obj.ObjectDictionary[key]; #>
	public class <#= value #>
	{
	}
<#
        } 
	} else if (obj.IsArray)
    {
    }
#>
}

<#+
public class Generator 
{
	public string Url { get; set; }
	public HttpMethod HttpMethod { get; set; }
	public Encoding Encoding { get; set; }
	public string Contents { get; set; }
	protected StringBuilder GenerationEnvironment { get; private set; }
	protected ITextTemplatingEngineHost Host { get; private set; }
	protected TextTransformation Context { get; private set; }
	protected Helper Helper { get; private set; }

	private WebClient wc = new WebClient();

	public Generator(TextTransformation context, ITextTemplatingEngineHost Host, StringBuilder generationEnvironment) 
	{ 
		this.Context = context;
		this.Host = Host;
		this.Helper = new Helper(context, this.Host, this.GenerationEnvironment);
		this.GenerationEnvironment = generationEnvironment;
	}

	public bool LoadJson(string filepath) 
	{
		this.Contents = File.ReadAllText(Helper.GetPath(filepath), this.Encoding);
		wc.Headers.Add(HttpRequestHeader.Accept, "*/*");
		wc.Headers.Add(HttpRequestHeader.AcceptEncoding, "gzip, deflate");
		wc.Headers.Add(HttpRequestHeader.ContentType, "application/json");
	
		return true;
	}

	public GenerateResult Execute()
	{
		try 
		{
			var data = this.Encoding.GetBytes(this.Contents ?? "");
			var json = "";
			if (this.HttpMethod == HttpMethod.Get)
            {
				json = wc.DownloadString(this.Url);
            } 
			else 
            {
				var result = wc.UploadData(this.Url, this.HttpMethod.ToString(), data);
				json = this.Encoding.GetString(result);
            }
			
			var js = new JavaScriptSerializer() {MaxJsonLength = int.MaxValue};
			var obj = js.Deserialize(json, typeof(object));

			
			var genResult = new GenerateResult()
			{
				IsDictionary = obj is IDictionary,
				IsArray = obj is IList
			};

			if (genResult.IsDictionary) genResult.ObjectDictionary = obj as IDictionary;
			else if (genResult.IsArray) genResult.ObjectList = obj as IList;
			else genResult.Object = obj;

			return genResult;
		}
		finally
		{
			wc.Dispose();
		}

	}

	public class GenerateResult
	{
		public object Object { get; set; }
		public IList ObjectList { get; set; }
		public IDictionary ObjectDictionary { get; set; }
		public bool IsDictionary { get; set; }
		public bool IsArray { get; set; }
	}
}

public class Helper
{
	protected TextTransformation Context { get; private set; }
	protected ITextTemplatingEngineHost Host { get; private set; }
	protected StringBuilder GenerationEnvironment { get; private set; }
	
	public Helper(TextTransformation context, ITextTemplatingEngineHost host, StringBuilder generationEnvironment) 
	{ 
		this.Context = context;
		this.Host = host; 
		this.GenerationEnvironment = generationEnvironment;
	}

	public string BasePath
	{
		get { return Path.GetDirectoryName(Host.TemplateFile); }
	}

	public EnvDTE.DTE DTE 
	{
		get
		{
			var provider = (IServiceProvider)this.Host;
			return (EnvDTE.DTE)provider.GetService(typeof(EnvDTE.DTE));
		}
	}

	public string Namespace
	{
		get
		{
			return CurrentProject.Properties.Item("DefaultNamespace").Value.ToString();
		}
	}

	public string GetNamespace(string filepath)
	{
		return GetNamespace(GetProjectItem(filepath));
	}

	public string GetNamespace(EnvDTE.ProjectItem projectitem)
    {
		var ns = this.Namespace;
		var item = GetProjectItem(projectitem);
		var namelist = GetRecursiveProjectItem(item);
		namelist.RemoveAt(0);
		
		ns += "." + string.Join(".", namelist.Reverse().Select(o => o.Name));
		return ns;
    }


	public EnvDTE.Project CurrentProject
	{
		get
		{
			var projectitem = this.GetProjectItem(this.Host.TemplateFile);
			return projectitem.ContainingProject;
		}
	}

	public string GetPath(string filepath)
	{
		return this.Host.ResolvePath(filepath);
	}


	public IList<EnvDTE.ProjectItem> GetRecursiveProjectItem(EnvDTE.ProjectItem projectitem)
    {
		if (projectitem == null) throw new ArgumentNullException("projectitem");

		var list = new List<EnvDTE.ProjectItem>();
		_GetRecursiveProjectItem(projectitem, ref list);

		return list;
    }

	private void _GetRecursiveProjectItem(object projectitem, ref List<EnvDTE.ProjectItem> projectitemlist)
    {
		if (projectitem is EnvDTE.ProjectItems)
			projectitem = GetProjectItem((EnvDTE.ProjectItems)projectitem);
			
		if (projectitem is EnvDTE.ProjectItem)
        {
			var item = (EnvDTE.ProjectItem)projectitem;
			projectitemlist.Add(item);
				
			_GetRecursiveProjectItem(item.Collection.Parent, ref projectitemlist);
        }
    }

	public EnvDTE.ProjectItem GetProjectItem(EnvDTE.ProjectItems projectitems)
	{
		if (projectitems is EnvDTE.ProjectItem)
			return (EnvDTE.ProjectItem)projectitems;

		return (EnvDTE.ProjectItem)((EnvDTE.ProjectItems)projectitems).Item(0);
	}

	public EnvDTE.ProjectItem GetProjectItem(EnvDTE.ProjectItem projectitem)
	{
		if (projectitem is EnvDTE.ProjectItem)
			return (EnvDTE.ProjectItem)projectitem;

		return (EnvDTE.ProjectItem)((EnvDTE.ProjectItems)projectitem).Item(0);
	}

	public EnvDTE.ProjectItem GetProjectItem(string filepath)
	{
		var item = this.DTE.Solution.FindProjectItem(filepath);
		if (item == null) throw new NullReferenceException("item");

		if (item is EnvDTE.ProjectItem)
			return (EnvDTE.ProjectItem)item;

		return (EnvDTE.ProjectItem)((EnvDTE.ProjectItems)item).Item(1);
	}

	private void AddFile(string file) {
		AddFile(GetProjectItem(this.Host.TemplateFile), file);
	}

	private void AddFile(EnvDTE.ProjectItem item, string filename)
	{
		var dir = Path.GetDirectoryName(item.get_FileNames(1));
		var path = Path.Combine(dir, filename);
		if (File.Exists(path)) { 
			var removeItem = DTE.Solution.FindProjectItem(path);
			if (removeItem != null) removeItem.Remove();
			File.Delete(path); 
		}
		File.WriteAllText(path, this.GenerationEnvironment.ToString());
		item.ProjectItems.AddFromFile(path);
		
	}

	private EnvDTE.ProjectItem AddFolder(string name)
	{
		var dir = Path.GetDirectoryName(this.Host.TemplateFile);
		var path = Path.Combine(dir, name);
		var projectItem = GetProjectItem(this.Host.TemplateFile);
		if (!Directory.Exists(path))
			Directory.CreateDirectory(path);

		projectItem = projectItem.Collection.Parent as EnvDTE.ProjectItem;
		return projectItem.ProjectItems.AddFromDirectory(path);
	}
}

public class JsonObject
{

}

public static class H
{
	public static string ClassName(string str)
    {
		return char.ToUpper(str[0]) + str.Substring(1);
    }
}
#>